
- hosts: localhost
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:
    
    - azure_rm_virtualnetwork:
        resource_group: "{{ resource_group_name }}"
        name: "{{ resource_group_name }}"
        address_prefixes: "172.0.0.0/16"
      register: virtualnetwork_output
        
    - local_action: copy content={{ virtualnetwork_output }} dest=/tmp/virtualnetwork_output.json

    - azure_rm_subnet:
        resource_group: "{{ resource_group_name }}"
        name: "{{ resource_group_name }}"
        address_prefix: "172.16.0.0/24"
        virtual_network: "{{ resource_group_name }}"
      register: subnet_output
        
    - local_action: copy content={{ subnet_output }} dest=/tmp/subnet_output.json

    - azure_rm_publicipaddress:
        resource_group: "{{ resource_group_name }}"
        name: "{{ resource_group_name }}"
        allocation_method: Static
      register: publicipaddress_output
        
    - local_action: copy content={{ publicipaddress_output }} dest=/tmp/publicipaddress_output.json

    - azure_rm_securitygroup:
        resource_group:  "{{ resource_group_name }}"
        name:  "{{ resource_group_name }}"
        rules:
          - name: SSH
            protocol: Tcp
            destination_port_range: 22
            access: Allow
            priority: 1001
            direction: Inbound
          - name: http
            protocol: Tcp
            destination_port_range:
              - 80
              - 443
              - 8080
              - 6443
            access: Allow
            priority: 1002
            direction: Inbound
          - name: k8s
            protocol: Tcp
            destination_port_range: 30000-32767
            access: Allow
            priority: 1003
            direction: Inbound
        register: securitygroup_output
        
     - local_action: copy content={{ securitygroup_output }} dest=/tmp/securitygroup_output.json


     - azure_rm_networkinterface:
        resource_group:  "{{ resource_group_name }}"
        name:  "{{ resource_group_name }}"
        virtual_network: "{{ resource_group_name }}"
        subnet: "{{ resource_group_name }}"
        public_ip_name: "{{ resource_group_name }}"
        security_group: "{{ resource_group_name }}"
      register: networkinterface_output

     - local_action: copy content={{ networkinterface_output }} dest=/tmp/networkinterface_output.json

     - include_tasks: network_interface.yaml
       vars:
        instance_name: "{{ item.key }}"
       loop: "{{ instances | dict2items }}"

